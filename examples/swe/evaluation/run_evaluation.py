import os

import yaml
from datasets import load_dataset
from pathlib import Path
from composio_crewai import ComposioToolSet, Action, App
from crewai import Agent, Crew, Process, Task
from langchain_openai import ChatOpenAI
from langchain_openai import AzureChatOpenAI
import logging

from rich.logging import RichHandler

CONFIG_FILE_PATH = "./base_task_config.yaml"

# Path of the current script
script_path = Path(__file__).resolve()
script_dir = script_path.parent
base_task_config_path = script_dir / Path(CONFIG_FILE_PATH)

# get logger
LOGGER_NAME = "local_workspace"

handler = RichHandler(show_time=False, show_path=False)
handler.setLevel(logging.DEBUG)
logger = logging.getLogger(LOGGER_NAME)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)
logger.propagate = False

'''
princeton swe bench lite dataset has these fields 
instance_id: (str) - A formatted instance identifier, usually as repo_owner__repo_name-PR-number.
patch: (str) - The gold patch, the patch generated by the PR (minus test-related code), that resolved the issue.
repo: (str) - The repository owner/name identifier from GitHub.
base_commit: (str) - The commit hash of the repository representing the HEAD of the repository before the solution PR is applied.
hints_text: (str) - Comments made on the issue prior to the creation of the solution PRâ€™s first commit creation date.
created_at: (str) - The creation date of the pull request.
test_patch: (str) - A test-file patch that was contributed by the solution PR.
problem_statement: (str) - The issue title and body.
version: (str) - Installation version to use for running evaluation.
environment_setup_commit: (str) - commit hash to use for environment setup and installation.
FAIL_TO_PASS: (str) - A json list of strings that represent the set of tests resolved by the PR and tied to the issue resolution.
PASS_TO_PASS: (str) - A json list of strings that represent tests that should pass before and after the PR application.
'''


def filter_from_repo_name(curr_dataset, repo_name):
    filtered_dataset = curr_dataset.filter(lambda x: x["repo"] == repo_name.strip().lower())
    return filtered_dataset


def get_issues_dataset():
    # Load the SWE-bench dataset
    dev_dataset = load_dataset("princeton-nlp/SWE-bench_Lite", split="dev")
    test_dataset = load_dataset("princeton-nlp/SWE-bench_Lite", split="test")

    # filter by repo-name 
    test_dataset = filter_from_repo_name(test_dataset, "pandas")

    print(test_dataset[:5])
    return test_dataset


def build_issue_description(hints, problem_statement):
    if not problem_statement or not problem_statement.strip():
        raise ValueError("problem statement is empty")
    tmpl = ""
    if hints:
        tmpl = f"Here are few hints to solve the issue described in problem_statement {hints}"
    tmpl += f'''
    Here is the issue, that you have to solve all ob your own 
    {problem_statement}
    '''
    return tmpl


def run():
    """
    Main function to load and display entries from the SWE-bench lite dataset.
    """
    azure_llm = AzureChatOpenAI(
        azure_endpoint=os.environ.get("azure_endpoint"),
        api_key=os.environ.get("azure_key"),
        model="test",
        model_version="1106-Preview",
        api_version="2024-02-01",
    )
    composio_toolset = ComposioToolSet()
    base_role = (
        "You are the best programmer. You think carefully and step by step take action."
    )
    goal = "Help fix the given issue / bug in the code. And make sure you get it working. "
    tools = composio_toolset.get_tools(apps=[App.LOCALWORKSPACE, App.CMDMANAGERTOOL, App.HISTORYKEEPER])
    issues = get_issues_dataset()

    for issue in issues:
        issue_description = build_issue_description(issue["hints_text"],
                                                    issue["problem_statement"])
        repo_name = issue["repo"]
        instance_id = issue["instance_id"]
        patch = issue["patch"]
        base_commit = issue["base_commit"]
        logger.info(f"starting agent for issue-id: {instance_id}\n"
                    f"issue-description: {issue_description}\n"
                    f"repo_name: {repo_name}\n")

        with open(base_task_config_path) as f:
            base_config = yaml.safe_load(f.read())

        issue_added_instruction = base_config["issue_description"].format(issue=issue_description, issue_id=instance_id)
        backstory_added_instruction = base_config["backstory"].format(repo_name=repo_name,
                                                                      base_commit=base_commit,
                                                                      git_access_token=os.environ.get("GITHUB_ACCESS_TOKEN"))

        print("--------------------------------------------------")

        expected_output = "Given issue should not be reproduced"
        swe_agent = Agent(
            role=base_role,
            goal=goal,
            backstory=backstory_added_instruction,
            verbose=True,
            tools=tools,
            llm=azure_llm,
            memory=True,
            cache=False,
        )

        coding_task = Task(
            description=issue_added_instruction,
            agent=swe_agent,
            expected_output=expected_output,
        )
        coding_task.execute()


if __name__ == "__main__":
    run()
