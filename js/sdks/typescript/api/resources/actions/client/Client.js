"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actions = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
const ComposioApi = __importStar(require("../../../index"));
const serializers = __importStar(require("../../../../serialization/index"));
class Actions {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * List action enums
     *
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.listActionEnums()
     */
    listActionEnums(requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, "api/v2/actions/list/enums"),
                method: "GET",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                throw new errors.ComposioApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * List all the action tags available in composio
     *
     * @param {ComposioApi.ListActionTagsRequest} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.listActionTags()
     */
    listActionTags(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { apps } = request;
            const _queryParams = {};
            if (apps != null) {
                _queryParams["apps"] = apps;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, "api/v2/actions/list/tags"),
                method: "GET",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.ActionsTagsResponseDto.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.ComposioApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * List and filter all the actions available in composio, with all the details needed for manual action execution or through function-calling.
     *
     * @param {ComposioApi.ActionsListActionsV2Request} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.listActionsV2()
     */
    listActionsV2(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { appNames, useCase, showEnabledOnly, limit, apps, actions, tags, usecaseLimit, filterImportantActions, showAll, page, } = request;
            const _queryParams = {};
            if (appNames != null) {
                _queryParams["appNames"] = appNames;
            }
            if (useCase != null) {
                _queryParams["useCase"] = useCase;
            }
            if (showEnabledOnly != null) {
                _queryParams["showEnabledOnly"] = showEnabledOnly.toString();
            }
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (apps != null) {
                _queryParams["apps"] = apps;
            }
            if (actions != null) {
                _queryParams["actions"] = actions;
            }
            if (tags != null) {
                _queryParams["tags"] = tags;
            }
            if (usecaseLimit != null) {
                _queryParams["usecaseLimit"] = usecaseLimit.toString();
            }
            if (filterImportantActions != null) {
                _queryParams["filterImportantActions"] = filterImportantActions.toString();
            }
            if (showAll != null) {
                _queryParams["showAll"] = showAll.toString();
            }
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, "api/v2/actions"),
                method: "GET",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.ActionsListResponseDto.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.ComposioApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve a list of all actions based on query parameters.
     *
     * @param {ComposioApi.ActionsListActionsMinimalV2Request} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.BadRequestError}
     *
     * @example
     *     await client.actions.listActionsMinimalV2()
     */
    listActionsMinimalV2(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { apps, actions, tags, useCase, page, limit, filterImportantActions, sortBy } = request;
            const _queryParams = {};
            if (apps != null) {
                _queryParams["apps"] = apps;
            }
            if (actions != null) {
                _queryParams["actions"] = actions;
            }
            if (tags != null) {
                _queryParams["tags"] = tags;
            }
            if (useCase != null) {
                _queryParams["useCase"] = useCase;
            }
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (filterImportantActions != null) {
                _queryParams["filterImportantActions"] = filterImportantActions.toString();
            }
            if (sortBy != null) {
                _queryParams["sortBy"] = sortBy;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, "api/v2/actions/list/all"),
                method: "GET",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.ActionsListResponseDto.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new ComposioApi.BadRequestError(_response.error.body);
                    default:
                        throw new errors.ComposioApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Execute an action. Support both connected account and no auth auth.
     *
     * @param {string} actionId
     * @param {ComposioApi.ActionExecutionReqDto} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.BadRequestError}
     *
     * @example
     *     await client.actions.executeActionV2("actionId")
     */
    executeActionV2(actionId, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, `api/v2/actions/${encodeURIComponent(actionId)}/execute`),
                method: "POST",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                requestType: "json",
                body: serializers.ActionExecutionReqDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.ActionExecutionResDto.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new ComposioApi.BadRequestError(_response.error.body);
                    default:
                        throw new errors.ComposioApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get the inputs for an action with NLA
     *
     * @param {string} actionId
     * @param {ComposioApi.ActionGetNlaInputsReqDto} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.getActionInputsV2("actionId", {
     *         text: "text"
     *     })
     */
    getActionInputsV2(actionId, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, `api/v2/actions/${encodeURIComponent(actionId)}/execute/get.inputs`),
                method: "POST",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                requestType: "json",
                body: serializers.ActionGetNlaInputsReqDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.NlaArgumentsResponseDto.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.ComposioApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get action details, including the input and response schema. This is very useful for setting upfunction/tool calling with composio actions.
     *
     * @param {string} actionId
     * @param {ComposioApi.ActionsGetActionV2Request} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.NotFoundError}
     *
     * @example
     *     await client.actions.getActionV2("actionId")
     */
    getActionV2(actionId, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { version } = request;
            const _queryParams = {};
            if (version != null) {
                _queryParams["version"] = version;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, `api/v2/actions/${encodeURIComponent(actionId)}`),
                method: "GET",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.ActionDetails.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 404:
                        throw new ComposioApi.NotFoundError(_response.error.body);
                    default:
                        throw new errors.ComposioApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Use composio as a http client to make request to the connected account service on your behalf, without managing authentication on your side.
     *
     * @param {ComposioApi.ActionProxyRequestConfigDto} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.actions.executeActionProxyV2({
     *         connectedAccountId: "connectedAccountId",
     *         endpoint: "endpoint",
     *         method: ComposioApi.ActionProxyRequestConfigDtoMethod.Get,
     *         parameters: [{
     *                 name: "name",
     *                 in: ComposioApi.ParameterIn.Query,
     *                 value: "value"
     *             }]
     *     })
     */
    executeActionProxyV2(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.ComposioApiEnvironment.Default, "api/v2/actions/proxy"),
                method: "POST",
                headers: Object.assign({ "x-org-api-key": yield core.Supplier.get(this._options.orgApiKey), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())),
                contentType: "application/json",
                requestType: "json",
                body: serializers.ActionProxyRequestConfigDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.ActionExecutionResDto.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.ComposioApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ComposioApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ComposioApiTimeoutError();
                case "unknown":
                    throw new errors.ComposioApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { "x-api-key": apiKeyValue };
        });
    }
}
exports.Actions = Actions;
