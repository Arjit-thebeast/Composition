/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace ApiKeys {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class ApiKeys {
    protected readonly _options: ApiKeys.Options;
    constructor(_options: ApiKeys.Options);
    /**
     * @param {ApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apiKeys.listApiKeys()
     */
    listApiKeys(requestOptions?: ApiKeys.RequestOptions): Promise<ComposioApi.ApiKeyResDto[]>;
    /**
     * @param {ComposioApi.GenerateApiKeyReqDto} request
     * @param {ApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apiKeys.generateApiKey({
     *         name: "name"
     *     })
     */
    generateApiKey(request: ComposioApi.GenerateApiKeyReqDto, requestOptions?: ApiKeys.RequestOptions): Promise<ComposioApi.ApiKeyResDto>;
    /**
     * @param {string} id
     * @param {ApiKeys.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apiKeys.deleteApiKey("id")
     */
    deleteApiKey(id: string, requestOptions?: ApiKeys.RequestOptions): Promise<ComposioApi.DeleteApiKeyResponseDto>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
