/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace Apps {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class Apps {
    protected readonly _options: Apps.Options;
    constructor(_options: Apps.Options);
    /**
     * List of available app categories, can be used to filter apps.
     *
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.listAppCategories()
     */
    listAppCategories(requestOptions?: Apps.RequestOptions): Promise<ComposioApi.AppListCategoriesResDto>;
    /**
     * List app enums
     *
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.listAppEnums()
     */
    listAppEnums(requestOptions?: Apps.RequestOptions): Promise<unknown>;
    /**
     * List all apps based on the given filters, if any. This will return all available apps if no filters are provided.
     *
     * @param {ComposioApi.AppsGetAppsRequest} request
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.getApps({
     *         category: "crm",
     *         additionalFields: "auth_schemes"
     *     })
     */
    getApps(request?: ComposioApi.AppsGetAppsRequest, requestOptions?: Apps.RequestOptions): Promise<ComposioApi.AppListResDto>;
    /**
     * Get app details
     *
     * @param {string} appName
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.NotFoundError}
     *
     * @example
     *     await client.apps.getApp("appName")
     */
    getApp(appName: string, requestOptions?: Apps.RequestOptions): Promise<ComposioApi.SingleAppInfoResDto>;
    /**
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.getOpenApiSpecs()
     */
    getOpenApiSpecs(requestOptions?: Apps.RequestOptions): Promise<void>;
    /**
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.appControllerSendEmailToClient()
     */
    appControllerSendEmailToClient(requestOptions?: Apps.RequestOptions): Promise<void>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
