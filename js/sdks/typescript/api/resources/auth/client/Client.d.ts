/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace Auth {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class Auth {
    protected readonly _options: Auth.Options;
    constructor(_options: Auth.Options);
    /**
     * Get client info
     *
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.auth.getUserInfo()
     */
    getUserInfo(requestOptions?: Auth.RequestOptions): Promise<ComposioApi.ClientInfoResDto>;
    /**
     * Add a new project to the client's organization
     *
     * @param {ComposioApi.ProjectReqDto} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.BadRequestError}
     *
     * @example
     *     await client.auth.addProject({
     *         name: "name"
     *     })
     */
    addProject(request: ComposioApi.ProjectReqDto, requestOptions?: Auth.RequestOptions): Promise<ComposioApi.ProjectResDto>;
    /**
     * Delete a project from the client's organization
     *
     * @param {string} projectId
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.BadRequestError}
     *
     * @example
     *     await client.auth.deleteProject("projectId")
     */
    deleteProject(projectId: string, requestOptions?: Auth.RequestOptions): Promise<ComposioApi.DeleteRowApidto>;
    /**
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.auth.getProjects()
     */
    getProjects(requestOptions?: Auth.RequestOptions): Promise<ComposioApi.ProjectListResDto>;
    /**
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.auth.identifyClient()
     */
    identifyClient(requestOptions?: Auth.RequestOptions): Promise<void>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
