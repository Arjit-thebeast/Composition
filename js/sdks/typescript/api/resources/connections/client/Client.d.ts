/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace Connections {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class Connections {
    protected readonly _options: Connections.Options;
    constructor(_options: Connections.Options);
    /**
     * Get all connections in the current project.
     *
     * @param {ComposioApi.ConnectionsGetConnectionsRequest} request
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.BadRequestError}
     *
     * @example
     *     await client.connections.getConnections()
     */
    getConnections(request?: ComposioApi.ConnectionsGetConnectionsRequest, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.GetConnectionsResponseDto>;
    /**
     * @param {ComposioApi.InitiateConnectionPayloadDto} request
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.BadRequestError}
     * @throws {@link ComposioApi.NotFoundError}
     *
     * @example
     *     await client.connections.initiateConnection({
     *         data: {
     *             "key": "value"
     *         },
     *         integrationId: "integrationId"
     *     })
     */
    initiateConnection(request: ComposioApi.InitiateConnectionPayloadDto, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.InitiateConnectionResponse>;
    /**
     * Update connection data
     *
     * @param {string} connectedAccountId
     * @param {ComposioApi.UpdateConnectionLabelsPayloadDto} request
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.connections.updateConnectionData("connectedAccountId", {
     *         labels: ["labels"]
     *     })
     */
    updateConnectionData(connectedAccountId: string, request: ComposioApi.UpdateConnectionLabelsPayloadDto, requestOptions?: Connections.RequestOptions): Promise<unknown>;
    /**
     * Reinitiate an existing connection to get new credentials
     *
     * @param {string} connectedAccountId
     * @param {ComposioApi.ReinitiateConnectionPayloadDto} request
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.NotFoundError}
     *
     * @example
     *     await client.connections.reinitiateConnection("connectedAccountId", {
     *         data: {
     *             "key": "value"
     *         }
     *     })
     */
    reinitiateConnection(connectedAccountId: string, request: ComposioApi.ReinitiateConnectionPayloadDto, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.InitiateConnectionResponse>;
    /**
     * @param {string} connectedAccountId
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.NotFoundError}
     *
     * @example
     *     await client.connections.getConnection("connectedAccountId")
     */
    getConnection(connectedAccountId: string, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.ConnectedAccountResponseDto>;
    /**
     * Delete a connection
     *
     * @param {string} connectedAccountId
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.connections.deleteConnection("connectedAccountId")
     */
    deleteConnection(connectedAccountId: string, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.DeleteRowApidto>;
    /**
     * Get authentication crdentials for the connected account, i.e all the headers, query parameters, etc. that are required to make requests to the third-party service directly.
     *
     * @param {string} connectedAccountId
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.connections.getConnectionInfo("connectedAccountId")
     */
    getConnectionInfo(connectedAccountId: string, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.GetConnectionInfoResponseDto>;
    /**
     * Disable a connection
     *
     * @param {string} connectedAccountId
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.connections.disableConnection("connectedAccountId")
     */
    disableConnection(connectedAccountId: string, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.ToggleConnectedAccountResponseDto>;
    /**
     * Enable a connection
     *
     * @param {string} connectedAccountId
     * @param {Connections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.connections.enableConnection("connectedAccountId")
     */
    enableConnection(connectedAccountId: string, requestOptions?: Connections.RequestOptions): Promise<ComposioApi.ToggleConnectedAccountResponseDto>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
