/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace Integrations {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class Integrations {
    protected readonly _options: Integrations.Options;
    constructor(_options: Integrations.Options);
    /**
     * List all connectors
     *
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.listAllConnectors()
     */
    listAllConnectors(requestOptions?: Integrations.RequestOptions): Promise<ComposioApi.GetConnectorListResDto>;
    /**
     * Create a new connector
     *
     * @param {ComposioApi.CreateConnectorPayloadDto} request
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.createConnector({
     *         name: "name"
     *     })
     */
    createConnector(request: ComposioApi.CreateConnectorPayloadDto, requestOptions?: Integrations.RequestOptions): Promise<ComposioApi.GetConnectorInfoResDto>;
    /**
     * Get connector info
     *
     * @param {string} integrationId
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.getConnectorInfo("integrationId")
     */
    getConnectorInfo(integrationId: string, requestOptions?: Integrations.RequestOptions): Promise<ComposioApi.GetConnectorInfoResDto>;
    /**
     * Delete a connector
     *
     * @param {string} integrationId
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.deleteConnector("integrationId")
     */
    deleteConnector(integrationId: string, requestOptions?: Integrations.RequestOptions): Promise<ComposioApi.DeleteRowApidto>;
    /**
     * Modify a connector
     *
     * @param {string} integrationId
     * @param {ComposioApi.PatchConnectorReqDto} request
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.modifyConnector("integrationId")
     */
    modifyConnector(integrationId: string, request?: ComposioApi.PatchConnectorReqDto, requestOptions?: Integrations.RequestOptions): Promise<ComposioApi.PatchConnectorResDto>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
