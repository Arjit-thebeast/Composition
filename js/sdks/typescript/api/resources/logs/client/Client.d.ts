/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace Logs {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class Logs {
    protected readonly _options: Logs.Options;
    constructor(_options: Logs.Options);
    /**
     * List logs
     *
     * @param {ComposioApi.LogsGetLogsRequest} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.logs.getLogs()
     */
    getLogs(request?: ComposioApi.LogsGetLogsRequest, requestOptions?: Logs.RequestOptions): Promise<ComposioApi.LogsResDto>;
    /**
     * Add new logs
     *
     * @param {ComposioApi.IngestDataDto} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.logs.postLogs({
     *         providerName: "providerName",
     *         actionName: "actionName",
     *         request: {
     *             "key": "value"
     *         },
     *         response: {
     *             "key": "value"
     *         },
     *         isError: true
     *     })
     */
    postLogs(request: ComposioApi.IngestDataDto, requestOptions?: Logs.RequestOptions): Promise<ComposioApi.IngestDataResponseDto>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
