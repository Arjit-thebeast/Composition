/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace Projects {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class Projects {
    protected readonly _options: Projects.Options;
    constructor(_options: Projects.Options);
    /**
     * Create a new project to the client's organization
     *
     * @param {ComposioApi.ProjectReqDto} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ComposioApi.BadRequestError}
     *
     * @example
     *     await client.projects.createProject({
     *         name: "name"
     *     })
     */
    createProject(request: ComposioApi.ProjectReqDto, requestOptions?: Projects.RequestOptions): Promise<ComposioApi.ProjectResDto>;
    /**
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.getProjects()
     */
    getProjects(requestOptions?: Projects.RequestOptions): Promise<ComposioApi.OrgProjectListResDto>;
    /**
     * Regenerate project API key. Ideally use when no API key is available as project can have multiple API keys
     *
     * @param {string} projectId
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.regenerateProjectApiKey("projectId")
     */
    regenerateProjectApiKey(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ComposioApi.ProjectResDto>;
    /**
     * @param {string} projectId
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.getProject("projectId")
     */
    getProject(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ComposioApi.ProjectResDto>;
    /**
     * @param {string} projectId
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.deleteProject("projectId")
     */
    deleteProject(projectId: string, requestOptions?: Projects.RequestOptions): Promise<ComposioApi.DeleteRowApidto>;
    /**
     * @param {string} projectId
     * @param {ComposioApi.RenameProjectRequest} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.renameProject("projectId", {
     *         body: {
     *             name: "name"
     *         }
     *     })
     */
    renameProject(projectId: string, request: ComposioApi.RenameProjectRequest, requestOptions?: Projects.RequestOptions): Promise<ComposioApi.UpdateRowApidto>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
