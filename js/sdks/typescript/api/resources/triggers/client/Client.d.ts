/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ComposioApi from "../../../index";
export declare namespace Triggers {
    interface Options {
        environment?: core.Supplier<environments.ComposioApiEnvironment | string>;
        apiKey: core.Supplier<string>;
        /** Override the x-org-api-key header */
        orgApiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-org-api-key header */
        orgApiKey?: string;
    }
}
export declare class Triggers {
    protected readonly _options: Triggers.Options;
    constructor(_options: Triggers.Options);
    /**
     * List triggers
     *
     * @param {ComposioApi.TriggersListTriggersRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.listTriggers()
     */
    listTriggers(request?: ComposioApi.TriggersListTriggersRequest, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.TriggerResDto[]>;
    /**
     * List trigger enums
     *
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.listTriggerEnums()
     */
    listTriggerEnums(requestOptions?: Triggers.RequestOptions): Promise<unknown>;
    /**
     * Update isNewWebhook
     *
     * @param {ComposioApi.WehbookNewFormatDto} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.updateNewWebhook({
     *         id: "id",
     *         isNewWebhook: true
     *     })
     */
    updateNewWebhook(request: ComposioApi.WehbookNewFormatDto, requestOptions?: Triggers.RequestOptions): Promise<unknown>;
    /**
     * Enables a trigger for a connected account and specific trigger name.
     *
     * @param {string} connectedAccountId
     * @param {string} triggerName
     * @param {ComposioApi.EnableTriggerBodyDto} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.enableTrigger("connectedAccountId", "triggerName", {
     *         triggerConfig: {
     *             "key": "value"
     *         }
     *     })
     */
    enableTrigger(connectedAccountId: string, triggerName: string, request: ComposioApi.EnableTriggerBodyDto, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.TriggerResponseDto>;
    /**
     * Lists active triggers based on query parameters.
     *
     * @param {ComposioApi.TriggersGetActiveTriggersRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.getActiveTriggers()
     */
    getActiveTriggers(request?: ComposioApi.TriggersGetActiveTriggersRequest, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.ActiveTriggersResDto>;
    /**
     * Switches the status of a trigger instance.
     *
     * @param {string} triggerId
     * @param {ComposioApi.SwitchTriggerStatusBodyDto} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.switchTriggerInstanceStatus("triggerId", {
     *         enabled: true
     *     })
     */
    switchTriggerInstanceStatus(triggerId: string, request: ComposioApi.SwitchTriggerStatusBodyDto, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.TriggerResponseDto>;
    /**
     * Disables a specified trigger instance.
     *
     * @param {string} triggerInstanceId
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.disableTrigger("triggerInstanceId")
     */
    disableTrigger(triggerInstanceId: string, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.TriggerResponseDto>;
    /**
     * Deletes a specified trigger instance.
     *
     * @param {string} triggerInstanceId
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.deleteTrigger("triggerInstanceId")
     */
    deleteTrigger(triggerInstanceId: string, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.DeleteRowApidto>;
    /**
     * Sets a universal callback URL for the client.
     *
     * @param {ComposioApi.SetCallbackUrlBodyDto} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.setCallbackUrl({
     *         callbackUrl: "callbackURL"
     *     })
     */
    setCallbackUrl(request: ComposioApi.SetCallbackUrlBodyDto, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.TriggerResponseDto>;
    /**
     * Retrieves the universal callback URL set for the client.
     *
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.getWebhookUrl()
     */
    getWebhookUrl(requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.WebhookUrlResponseDto>;
    /**
     * Fetches logs based on connection and integration details.
     *
     * @param {ComposioApi.TriggersGetTriggerLogsRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.getTriggerLogs()
     */
    getTriggerLogs(request?: ComposioApi.TriggersGetTriggerLogsRequest, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.TriggerLogsResDto>;
    /**
     * Get Trigger Info
     *
     * @param {string} triggerName
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.getTriggerInfoV2("triggerName")
     */
    getTriggerInfoV2(triggerName: string, requestOptions?: Triggers.RequestOptions): Promise<ComposioApi.SingleTriggerResDto[]>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "x-api-key": string;
    }>;
}
